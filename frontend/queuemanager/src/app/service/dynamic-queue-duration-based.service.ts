function pickMusicSubset(musicFiles: Array<any>, targetTime: number, tolerance: number) {
	// generated by ChatGPT with small adjustments
	// https://chatgpt.com/share/34e37503-2bdf-478d-a6c1-a364ae519870
	// 1. prompt: Please write a JavaScript program for me. I have a pool of music files with various durations.
	//            I want to pick a subset of music files so that the music plays for x minutes.
	// 2. prompt: This works perfectly correct. But it is too slow.
	// 3. prompt: It's still too slow. Any result that is within 10 seconds of the target duration is okay.
	 
    // Sort the music files in descending order by duration
    musicFiles.sort((a, b) => b.duration - a.duration);

    let bestSubset: Array<number> = [];
    let bestDuration = 0;

    function backtrack(index: number, currentSubset: Array<number>, currentDuration: number) {
        // Early exit if within the acceptable margin
        if (Math.abs(currentDuration - targetTime) <= tolerance) {
            bestSubset = [...currentSubset];
            bestDuration = currentDuration;
            return true; // Found a close enough match
        }

        // If current duration exceeds target or if no more files are available, stop exploring
        if (currentDuration > targetTime || index === musicFiles.length) {
            return false;
        }

        // Try including the current file
        if (currentDuration + musicFiles[index].duration <= targetTime) {
            currentSubset.push(index);
            if (backtrack(index + 1, currentSubset, currentDuration + musicFiles[index].duration)) {
                return true;
            }
            currentSubset.pop(); // Backtrack
        }

        // Try excluding the current file
        return backtrack(index + 1, currentSubset, currentDuration);
    }

    // Start the backtracking process
    backtrack(0, [], 0);
	let durations: Array<number> = [];
	let names: Array<string> = [];
	for (let i = 0; i < bestSubset.length; i++) {
		durations.push(musicFiles[bestSubset[i]].duration);
		names.push(musicFiles[bestSubset[i]].name);
	}
	
    return {
        totalDuration: bestDuration,
        indexes: bestSubset,
	files: durations,
	names: names
    };
}
/*

function pickMusicSubsetRep(musicFiles: Array<any>, targetTime: number, tolerance: number, rep: number) {
    // Sort the music files in descending order by duration
    musicFiles.sort((a, b) => b - a);
    const start = Date.now();

	for (let i = 0; i < rep; i++) {
		let res = pickMusicSubset(musicFiles, targetTime, tolerance);
		if (!res) {
			console.log("Failed");
			return;
		}
		res.indexes.sort((a, b) => b - a);
		console.log(res.totalDuration, res.files, " indexes: " + res.indexes, " names: " + res.names);
		for (let j = 0; j < res.indexes.length; j++) {
			musicFiles.splice(res.indexes[j], 1)
		}
	}
	const end = Date.now();
	console.log(`Execution time: ${end - start} ms`);
	console.log(musicFiles);
}
// Example usage:

const musicFiles = [180, 120, 200, 150, 300, 90]; // Durations in seconds
const targetTime = 8 * 60; // Target total duration in minutes

const result = pickMusicSubset(musicFiles, targetTime, 10);

if (result) {
    console.log("Selected music files durations:", result.files);
    console.log("Total duration (seconds):", result.totalDuration);
    console.log("Total duration (minutes):", (result.totalDuration / 60).toFixed(2));
} else {
    console.log("No suitable subset found.");
}

let music = MockData.music;

pickMusicSubsetRep([...music], 7 * 60, 10, 5);
*/